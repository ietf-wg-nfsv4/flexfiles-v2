<section anchor="sec_systematic" numbered="true" removeInRFC="false" toc="default">
  <name>Systematic Mojette Transform</name>
  
  <t>
    The Mojette Transform is an erasure coding technique that provides
    fault tolerance for data storage systems by enabling the recovery
    of lost data blocks. This section describes the integration of the
    systematic Mojette Transform into the NFS protocol, focusing on
    encoding and decoding file system blocks, typically sized at 4KB
    or 8KB.
  </t>

  <section anchor="sec_sys_dbr" numbered="true" removeInRFC="false" toc="default">
    <name>Data Block Representation</name>

    <t>
      In the context of NFS, a data block corresponds to a file system block,
      which is a contiguous segment of data, typically 4KB or 8KB in size. The
      systematic Mojette Transform encodes these blocks to ensure data integrity
      and availability in distributed storage environments.
    </t>
  </section>

  <section anchor="sec_sys_esmt" numbered="true" removeInRFC="false" toc="default">
    <name>Encoding with the Systematic Mojette Transform</name>

    <t>
      The systematic Mojette Transform involves the following steps to encode
      a file system block:
    </t>

    <dl newline="false" spacing="normal">
      <dt>Initialization:</dt>
      <dd>
        Each file system block is treated as a 2D grid of data elements
        (pixels). Typically, a block is structured as a matrix of size
        P * Q, where P and Q are the dimensions of the grid.
      </dd>

      <dt>Projections Calculation:</dt>
      <dd>
        Projections are computed along specific directions defined by
        pairs of coprime integers (p_i, q_i). Each projection sums the
        values of the data elements (pixels) along a line defined by
        these directions. The size of a projection is given by <xref
        target='size_of_proj' />.

        <figure anchor='size_of_proj'>
          <artwork>
Size of projection = (P - 1) * |q| + (Q - 1) * |p| + 1
          </artwork>
       </figure>

        For a given projection direction (p_i, q_i), the projection values
        are calculated as <xref target='projection' />,
        where $\Delta$ is 1 if the argument is zero and 0 otherwise.

        <figure anchor='size_of_proj'>
          <artwork>
       $$\text{Projection}(b, p_i, q_i) = \sum_{k=0}^{Q-1} \sum_{l=0}^{P-1} \text{Data}(k, l) \cdot \Delta(b - l \cdot p_i + k \cdot q_i)$$
          </artwork>
       </figure>
      </dd>

      <dt>Systematic Code Construction:</dt>
      <dd>
        In the systematic version, the original data block (file system
        block) is part of the encoded output. Additional projections are
        calculated to provide redundancy. If K is the number of original
        data blocks and N is the total number of encoded blocks (including
        projections), the systematic code will have the first K blocks as
        the original data and the remaining N - K blocks as projections.
      </dd>
    </dl>
  </section>

  <section anchor="sec_sys_dsmt" numbered="true" removeInRFC="false" toc="default">
    <name>Decoding with the Systematic Mojette Transform</name>

    <t>
      To decode a file system block that has undergone the systematic Mojette
      Transform, the following steps are followed:
    </t>

    <dl newline="false" spacing="normal">
      <dt>Identify Missing Data:</dt>
      <dd>
        Determine which data blocks are missing. Let
        E be the number of missing blocks.
      </dd>

      <dt>Recompute Projections:</dt>
      <dd>
        Compute the projections of the available (partial) data
        blocks. Calculate the differences between the projections of
        the full data and the partial data.
      </dd>

      <dt>Reconstruction Algorithm:</dt>
      <dd>
        Use the inverse Mojette Transform algorithm to reconstruct the
        missing data. This involves solving a system of linear equations
        defined by the projection differences and the projection
        directions (p_i, q_i). The algorithm iteratively refines the
        values of the missing data elements until the original data
        block is reconstructed.
      </dd>
    </dl>
  </section>

  <section numbered="true" removeInRFC="false" toc="default">
    <name>Example</name>

    <t>
      Assume a file system block of 4KB is divided into a $64\times4$
      matrix of 128-bit elements. Using the systematic Mojette Transform,
      we first compute projections along selected directions, such
      as (0, 1), and (1 ,1). The original 4 blocks of 64 128-bit
      elements remains part of the encoded data, and the 2 additional
      projections are stored for redundancy. If a data loss occurs,
      the missing elements can be recovered by using the projections
      and solving the inverse problem.
    </t>

  </section>
  <section numbered="true" removeInRFC="false" toc="default">
    <name>Conclusion</name>

    <t>
      The systematic Mojette Transform provides an efficient and effective
      way to enhance data reliability by encoding file system blocks
      with additional projections. This method ensures that data can be
      reconstructed even in the presence of failures, thereby enhancing
      the fault tolerance of the file system.
    </t>

  </section>
</section>

<section anchor="sec_benefits" numbered="true" removeInRFC="false" toc="default">
  <name>Benefits of Systematic vs. Non-Systematic Mojette Transform</name>

  <dl newline="false" spacing="normal">
    <dt>Redundancy Reduction:</dt>
    <dd>
      Systematic Mojette coding reduces redundancy by integrating the
      original data blocks into the encoded data, unlike non-systematic
      codes that generate entirely new data from the original.
    </dd>

    <dt>Efficiency:</dt>
    <dd>
      Fewer projections need to be calculated and stored, reducing both
      computational and storage overhead.
    </dd>

    <dt>Performance:</dt>
    <dd>
      Decoding is faster and simpler, especially when some original data
      blocks are available, enabling quicker data recovery and access.
    </dd>
  </dl>

  <t>
    By leveraging the systematic Mojette Transform, NFS client can achieve
    robust data protection with minimal performance impact.
  </t>
</section>

